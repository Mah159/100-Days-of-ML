# -*- coding: utf-8 -*-
"""Day 1_Data_Preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NEvoYa2uwVy0y4W0y9hXR7bCOciTVGry
"""

import numpy as np
import pandas as pd

dataset = pd.read_csv('Data.csv')
X = dataset.iloc[ : , :-1].values
Y = dataset.iloc[ : , 3].values

import sklearn
print(sklearn.__version__)

pip install --upgrade scikit-learn

from sklearn.impute import SimpleImputer

# Create an instance of SimpleImputer with the desired strategy
imputer = SimpleImputer(missing_values=np.nan, strategy="mean")

# Fit the imputer to the columns of the dataset that contain missing values
imputer = imputer.fit(X[:, 1:3])

# Transform the dataset, replacing missing values with the computed mean
X[:, 1:3] = imputer.transform(X[:, 1:3])

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X = LabelEncoder()
X[ : , 0] = labelencoder_X.fit_transform(X[ : , 0])

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split( X , Y , test_size = 0.2, random_state = 0)

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X = LabelEncoder()
X[ : , 0] = labelencoder_X.fit_transform(X[ : , 0])
# The categorical_features argument is no longer supported
# Instead, use the handle_unknown='ignore' and sparse=False arguments
onehotencoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
# Reshape X to a 2D array if necessary
# X = X.reshape(-1, 1) if X.ndim == 1 else X
X = onehotencoder.fit_transform(X) #removed .toarray() as sparse=False
labelencoder_Y = LabelEncoder()
Y =  labelencoder_Y.fit_transform(Y)

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.fit_transform(X_test)